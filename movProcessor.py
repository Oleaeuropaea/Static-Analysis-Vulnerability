from opProcessor import OpProcessor
from utils import getRelativeOffset

class MovProcessor(OpProcessor):
    def __init__(self, context):
        super().__init__('mov')
        self._ctx = context

    def process(self, instruction):
        super().process(instruction)

        args = instruction['args']
        #REGISTER <- REGISTER
        #MOV RDX, EDX
        if self.isRegister(args['dest']) and self.isRegister(args['value']):
            self._ctx.setRegisterValue(args['dest'], self._ctx.getRegisterValue(args['value']))

        #REGISTER <- IMMEDIATE
        #mov rdx, 0xb
        elif self.isRegister(args['dest']) and isImediateValue(args['value']):
            self._ctx.setRegisterValue(args['dest'], int(args['value'], base=16))

        #REGISTER <- MEMORY + OBS
        #400579:	mov    rdx,QWORD PTR [rip+0x200ac0]        # 601040 <stdin@@GLIBC_2.2.5>
        # TODO  Ignorar estas instrucoes?
        elif   self.isRegister(args['dest']) and isPointer(args['value'])and 'obs' in args:
            return[]

        #400579:	mov    rdx,DWORD PTR [rbp+x0x]   # 601040 <stdin@@GLIBC_2.2.5>
        elif   self.isRegister(args['dest']) and isPointer(args['value'])and 'obs' not in args:
            pointerType = extractTypeOfPointer(args['value'])
            dest= args['dest']
            dest=dest[dest.find("rbp")+1:dest.find("]")]
            offset = getRelativeOffset(dest)
            valueToWrite=self._ctx.getStackValue(offset).value
            registerToWrite = args['dest'][1:]

            #QWORD 64 bits
            if pointerType == 'QWORD':
                #TODO diferença Alterar 2 Values?
                self._ctx.setRegisterValue(registerToWrite,valueToWrite)

                #DWORD 32 bits
            elif pointerType == 'DWORD':
                self._ctx.setRegisterValue(registerToWrite,valueToWrite)

            #WORD 16 bits
            elif pointerType == 'WORD':
                #TODO Altera a posição de 1/2Value
                self._ctx.setRegisterValue(registerToWrite,valueToWrite)

            #BYTE 8
            elif pointerType == 'BYTE':
                #TODO Altera a posição de 1/4 Value
                self._ctx.setRegisterValue(registerToWrite,valueToWrite)

            return[]

        #MEMORY <- IMMEDIATE
        #400572:	mov    DWORD PTR [rbp-0x4],0xb
        elif isPointer(args['dest']) and isImediateValue(args['value']):
            pointerType = extractTypeOfPointer(args['dest'])
            dest= args['dest']
            dest=dest[dest.find("rbp")+1:dest.find("]")]
            offset = getRelativeOffset(dest)
            valueToWrite = args['value']


            #QWORD 64 bits
            if pointerType == 'QWORD':
                #TODO diferença Alterar 2 Values?
                self._ctx.getStackValue(offset).value= valueToWrite

                #DWORD 32 bits
            elif pointerType == 'DWORD':
                #Altera a posição de 1Value
                self._ctx.getStackValue(offset).value= valueToWrite

            #WORD 16 bits
            elif pointerType == 'WORD':
                #TODO Altera a posição de 1/2Value
                x=0

            #BYTE 8
            elif pointerType == 'BYTE':
                x=0
                #TODO Altera a posição de 1/4 Value

            return[]

        #MEMORY <- REGISTER
        #exemplo 23 mov    QWORD PTR [rbp-0x18],rdi
        elif isPointer(args['dest']) and self.isRegister(self, args['value']):
            pointerType = extractTypeOfPointer(args['dest'])
            valueToWrite = self._ctx.getRegisterValue(args['value'])
            dest= args['dest']
            dest=dest[dest.find("rbp")+1:dest.find("]")]
            offset = getRelativeOffset(dest)

            #QWORD 64 bits
            if pointerType == 'QWORD':
                #TODO diferença Alterar 2 Values?
                self._ctx.getStackValue(offset).value= valueToWrite

            #DWORD 32 bits
            elif pointerType == 'DWORD':
                self._ctx.getStackValue(offset).value= valueToWrite

            #WORD 16 bits
            elif pointerType == 'WORD':
                #TODO Altera a posição de 1/2Value
                x=0
            #BYTE 8
            elif pointerType == 'BYTE':
                #TODO Altera a posição de 1/4 Value
                x=0

        return []

    def isRegister(self, jsonValue):
        return jsonValue[1:] in self._ctx.getRegisters()

def isPointer(jsonValue):
    return 'PTR' in jsonValue

def isImediateValue(jsonValue):
    return jsonValue[0:2]=='0x'

def extractTypeOfPointer(param):
    return param.split(" ", 1)[0]




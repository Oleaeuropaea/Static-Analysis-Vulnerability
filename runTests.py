#!/usr/bin/python3
import sys
import json
from os import listdir
from os.path import abspath, isfile, isdir, join
from itertools import filterfalse
from processor import Processor

def validFile(directory, filename):
    return isfile(join(directory, filename)) and filename.endswith('.json')

def loadJson(filename):
    with open(filename) as input:
        content = input.read()

    return json.loads(content)

def generateJson(lst):
    lst.sort(key=lambda v: v['address'])
    lst.sort(key=lambda v: v['vulnerability'])
    return json.dumps(lst, sort_keys=True)

def execute(filename):
    code = loadJson(filename)

    proc = Processor(code)
    res = proc.run()

    return generateJson(res)

def loadTestFiles(directory):
    if not isdir(directory):
        print('python ./runTests <directory>')
        print('./runTests <directory>')
        sys.exit(2)

    jsonfiles = [join(directory, fn) for fn in listdir(directory) if validFile(directory, fn) ]

    jfSize = len(jsonfiles)
    if jfSize == 0 or jfSize % 2 != 0:
        print('The directory should contains a json file (1) and a output json file (2) for each test.')
        print('     (1) File containing json objects that are the result of parsing the corresponing assembly file of the program')
        print('     (2) File containing the expected result')
        sys.exit(1)

    iterIn = filterfalse(lambda f: f.endswith('.output.json'), jsonfiles)
    input = list(iterIn)
    input.sort()
    iterOut = filterfalse(lambda f: not f.endswith('.output.json'), jsonfiles)
    output = list(iterOut)
    output.sort()

    return input, output

def main(argv):
    directory = argv[1]

    directory = abspath(directory)

    input, output = loadTestFiles(directory)

    nTests = len(input)

    for idx in range(nTests):
        current = execute(input[idx])

        outContent = loadJson(output[idx])
        expected = generateJson(outContent)

        result = 'Successed' if expected == current else 'Failed'

        print('Test', input[idx], ':', result)

if __name__ == '__main__':
    main(sys.argv)